# This code is part of Qiskit.
#
# (C) Copyright IBM 2021.
#
# This code is licensed under the Apache License, Version 2.0. You may
# obtain a copy of this license in the LICENSE.txt file in the root directory
# of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.
#
# Any modifications or derivative works of this code must retain this
# copyright notice, and modified files need to carry a notice indicating
# that they have been altered from the originals.

"""The Active-Space Reduction interface."""

from typing import List, Optional, Tuple, Union

from qiskit_nature.deprecation import DeprecatedType, warn_deprecated_same_type_name
from qiskit_nature.properties.second_quantization.electronic import ElectronicDriverResult

from .base_transformer import BaseTransformer
from .electronic import ActiveSpaceTransformer as NewActiveSpaceTransformer

ACTIVE_INTS_SUBSCRIPT = "pqrs,pi,qj,rk,sl->ijkl"

INACTIVE_ENERGY_SUBSCRIPT = "ij,ji"


class ActiveSpaceTransformer(BaseTransformer):
    r"""**DEPRECATED!**

    The reduction is done by computing the inactive Fock operator which is defined as
    :math:`F^I_{pq} = h_{pq} + \sum_i 2 g_{iipq} - g_{iqpi}` and the inactive energy which is
    given by :math:`E^I = \sum_j h_{jj} + F ^I_{jj}`, where :math:`i` and :math:`j` iterate over
    the inactive orbitals.
    By using the inactive Fock operator in place of the one-electron integrals, `h1`, the
    description of the active space contains an effective potential generated by the inactive
    electrons. Therefore, this method permits the exclusion of non-core electrons while
    retaining a high-quality description of the system.

    For more details on the computation of the inactive Fock operator refer to
    https://arxiv.org/abs/2009.01872.

    The active space can be configured in one of the following ways through the initializer:
        - when only `num_electrons` and `num_molecular_orbitals` are specified, these integers
          indicate the number of active electrons and orbitals, respectively. The active space will
          then be chosen around the Fermi level resulting in a unique choice for any pair of
          numbers.  Nonetheless, the following criteria must be met:

            #. the remaining number of inactive electrons must be a positive, even number

            #. the number of active orbitals must not exceed the total number of orbitals minus the
               number of orbitals occupied by the inactive electrons

        - when, in addition to the above, `num_alpha` is specified, this can be used to disambiguate
          the active space in systems with non-zero spin. Thus, `num_alpha` determines the number of
          active alpha electrons. The number of active beta electrons can then be determined based
          via `num_beta = num_electrons - num_alpha`. The same requirements as listed in the
          previous case must be met.
        - finally, it is possible to select a custom set of active orbitals via their indices using
          `active_orbitals`. This allows selecting an active space which is not placed around the
          Fermi level as described in the first case, above. When using this keyword argument, the
          following criteria must be met *in addition* to the ones listed above:

            #. the length of `active_orbitals` must be equal to `num_molecular_orbitals`.

            #. the sum of electrons present in `active_orbitals` must be equal to `num_electrons`.

    References:
        - *M. Rossmannek, P. Barkoutsos, P. Ollitrault, and I. Tavernelli, arXiv:2009.01872
          (2020).*
    """

    def __init__(
        self,
        num_electrons: Optional[Union[int, Tuple[int, int]]] = None,
        num_molecular_orbitals: Optional[int] = None,
        active_orbitals: Optional[List[int]] = None,
    ) -> None:
        """Initializes a transformer which can reduce a `QMolecule` to a configured active space.

        This transformer requires the AO-basis matrices `hcore` and `eri` to be available, as well
        as the basis-transformation matrix `mo_coeff`. A `QMolecule` produced by Qiskit's drivers in
        general satisfies these conditions unless it was read from an FCIDump file. However, those
        integrals are likely already reduced by the code which produced the file or can be
        transformed using this driver after copying the MO-basis integrals of the produced
        `QMolecule` into the AO-basis containers and initializing `mo_coeff` with an identity matrix
        of appropriate size.

        Args:
            num_electrons: The number of active electrons. If this is a tuple, it represents the
                           number of alpha and beta electrons. If this is a number, it is
                           interpreted as the total number of active electrons, should be even, and
                           implies that the number of alpha and beta electrons equals half of this
                           value, respectively.
            num_molecular_orbitals: The number of active orbitals.
            active_orbitals: A list of indices specifying the molecular orbitals of the active
                             space. This argument must match with the remaining arguments and should
                             only be used to enforce an active space that is not chosen purely
                             around the Fermi level.
        """
        warn_deprecated_same_type_name(
            "0.2.0",
            DeprecatedType.CLASS,
            "ActiveSpaceTransformer",
            "from qiskit_nature.transformers.second_quantization.electronic as a direct replacement",
        )

        self.inner = NewActiveSpaceTransformer(
            num_electrons, num_molecular_orbitals, active_orbitals
        )

    def transform(self, molecule_data):
        if not isinstance(molecule_data, ElectronicDriverResult):
            molecule_data = ElectronicDriverResult.from_legacy_driver_result(molecule_data)
        return self.inner.transform(molecule_data)
