---
prelude: >
    Qiskit Nature 0.5 comes with a major redesign of the :class:`.BaseProblem`
    layer of its stack. Rather than tightly integrating drivers and transformers,
    problems are now a lot more standalone and are generated by the
    various drivers (or built out by a user to their custom needs directly).
    As a short example comparing the previous to the new problem creation:


    .. code-block:: python

      problem = ElectronicStructureProblem(driver, [transformer])

    The new design works as follows:


    .. code-block:: python

      problem = driver.to_problem(include_dipole=True)

      reduced_problem = transformer.transform(problem)

    Check out the `migration guide for electronic structure calculations
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_c_electronic_structure.html>`_
    for more details.

    Furthermore, as a general refactoring strategy the code was migrated from locations
    ``qiskit_nature.X.second_quantization`` to ``qiskit_nature.X.second_q``.
    However, in doing so some classes/modules were re-categorized, so be sure to
    check out the `detailed migration guide <https://qiskit-community.github.io/qiskit-nature/migration/index.html>`_
    for more details.
features:
  - |
    The ``algorithms`` module now requires the new algorithms introduced in
    Qiskit Terra 0.22 which in turn rely on the `Qiskit Primitives
    <https://docs.quantum.ibm.com/api/qiskit/primitives>`_ themselves.
    For more details check out the `migration guide for problem solving
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_b_solving_problems.html>`_.
  - |
    The refactoring of the electronic structure stack has enabled the development
    of third-party plugins allowing classical codes to call Qiskit Nature instead
    of relying on the development of ``drivers`` in the Qiskit Nature package.
    One example is the new `Qiskit Nature PySCF Plugin
    <https://github.com/qiskit-community/qiskit-nature-pyscf>`_ which can be used
    like so:

    .. code-block:: python

      from pyscf import gto, scf, mcscf

      from qiskit.algorithms.optimizers import SLSQP
      from qiskit.primitives import Estimator
      from qiskit_nature.second_q.algorithms import GroundStateEigensolver, VQEUCCFactory
      from qiskit_nature.second_q.circuit.library import UCCSD
      from qiskit_nature.second_q.mappers import ParityMapper, QubitConverter

      from qiskit_nature_pyscf import QiskitSolver

      mol = gto.M(atom="Li 0 0 0; H 0 0 1.6", basis="sto-3g")

      h_f = scf.RHF(mol).run()

      norb, nelec = 2, 2

      cas = mcscf.CASCI(h_f, norb, nelec)

      converter = QubitConverter(ParityMapper(), two_qubit_reduction=True)

      vqe = VQEUCCFactory(Estimator(), UCCSD(), SLSQP())

      algorithm = GroundStateEigensolver(converter, vqe)

      cas.fcisolver = QiskitSolver(algorithm)

      cas.run()

    Qiskit Nature still provides ``drivers`` to enable simple testing and provide
    a more accessible entry to Qiskit Nature for users who do not come from a
    classical chemistry computing background. Check out the
    `migration guide for electronic structure calculations
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_c_electronic_structure.html>`_
    to learn how to update your code to use the refactored drivers.
  - |
    The ``properties`` concept has been largely redesigned and is a lot more
    refined now. Instead of being a "catchall" for operator factories, the
    module has been cleanly separated into various components. Check out the
    corresponding section of the `migration guide for electronic structure calculations
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_c_electronic_structure.html>`_
    for more details.
  - |
    The vibrational structure stack has been refactored in-line with the changes
    to the electronic structure stack mentioned previously. However, changes to
    this stack also include corrections to the differentiation of real-space and
    second-quantized coefficients of the Watson hamiltonian. For more details,
    check out the `migration guide for vibrational structure calculations
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_d_vibrational_structure.html>`_.
  - |
    The ``lattices`` and related ``LatticeModel`` classes have undergone some API
    changes, particularly around the location of the utility methods for uniform
    lattice generation. For more details check out the `migration guide for lattice models
    <https://qiskit-community.github.io/qiskit-nature/migration/0.5_e_lattice_models.html>`_.
deprecations:
  - |
    The protein folding stack has been migrated to `Qiskit Research
    <https://github.com/qiskit-research/qiskit-research>`_.
    Thus, all of its components in Qiskit Nature have been deprecated.
  - |
    The ``BOPESSampler`` has been deprecated without direct replacement. For the
    future direction in which classical codes will be calling Qiskit Nature
    (instead of the use of ``drivers``) the features provided by the sampler are
    no longer the responsibility of Qiskit Nature. A warm-starting ``InitialPoint``
    utility `has been suggested <https://github.com/Qiskit/qiskit-nature/issues/750>`_.
    You can subscribe to that feature request to receive updates.
