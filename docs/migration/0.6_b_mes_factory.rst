The (Minimum)EigensolverFactory Migration Guide
===============================================

All the factory classes which could be used to construct
:class:`~qiskit.algorithms.minimum_eigensolvers.MinimumEigensolver` or
:class:`~qiskit.algorithms.eigensolvers.Eigensolver` objects have been
deprecated as part of version 0.6 of Qiskit Nature.

Their benefit over an improved documentation on how to properly set these algorithms up for use with
Qiskit Nature has diminished over time. Thus, you can now find proper **How-to guides** detailing
how you can achieve the same functionality which used to be provided by these classes. The table
below summarizes where you need to look for the steps to replace a factory class:

.. list-table:: (Minimum)EigensolverFactory Replacements
   :header-rows: 1

   * - Legacy class
     - How-to guide
   * - :class:`~qiskit_nature.second_q.algorithms.NumPyEigensolverFactory`
     - :ref:`Finding excited state energies with a NumPyEigensolver <how-to-numpy>`
   * - :class:`~qiskit_nature.second_q.algorithms.NumPyMinimumEigensolverFactory`
     - :ref:`Finding the ground state energy with a NumPyMinimumEigensolver <how-to-numpy-min>`
   * - :class:`~qiskit_nature.second_q.algorithms.VQEUCCFactory`
     - :ref:`Using a UCC-like ansatz with a VQE <how-to-vqe-ucc>`
   * - :class:`~qiskit_nature.second_q.algorithms.VQEUVCCFactory`
     - :ref:`Using a UVCC-like ansatz with a VQE <how-to-vqe-uvcc>`

.. vim: set tw=100:
